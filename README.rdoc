= chef-jenkins

Use Jenkins to drive continuous deployment and synchronization of your Chef Environments from a git repository

== How it works

# You should always be within a chef-repo when you use chef-jenkins! (we are, after all, going to get run from jenkins - but see that later on)

# To syncronize a git repository with a chef server - the branch is master by default.
# You must provide an environment to pin to, which will always be current
$ chef-jenkins sync --env-to dev

# Propogate the cookbook policy from one environment and make it the policy for another environment
$ chef-jenkins prop --env-from dev --env-to qa

# Use a config file
$ chef-jenkins prop --config ~/chef-jenkins.rb --env-from dev --env-to qa

# Use the default config file - jenkins.rb
$ chef-jenkins prop/sync

# Include tests for cookbook(s) (ruby test is knife cookbook test)
$ chef-jenkins sync --env-to ops -t ruby,foodcritic

# Freeze cookbook while uploading
$ chef-jenkins sync --env-to ops -f

== Config file

    current_dir = File.dirname(__FILE__)
    log_level                :info
    log_location             STDOUT
    node_name                "CHEF_CLIENT_NAME"
    client_key               "CHEF_CLIENT_KEY"
    chef_server_url          "URL"
    cache_type               'BasicFile'
    cache_options            ( :path => "#{ENV['HOME']}/.chef/checksums" )
    cookbook_path            ["#{current_dir}/cookbooks", "#{current_dir}/site-cookbooks"]
    role_path                ["#{current_dir}/roles"]
    data_bag_path            ["#{current_dir}/data_bags"]
    
    jenkins({
      :repo_dir => current_dir,
      :repo_url => 'CHEF_REPO_URL',
      :git_user => "Jenkins CI",
      :git_email => "jenkins@foo.bar",
      :env_to => "ops",
      :branch => "master",
      :foodcritic => {
        :fail_tags => ["correctness"],
        :tags => [],
        :include_rules => []
      }
    })

* For details about foodcritic check rules, see http://acrmp.github.com/foodcritic/

== Contributing to chef-jenkins
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Opscode, Inc. See LICENSE.txt for
further details.

